@page "/ChangePassword"
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<AuthorizeView>
    <Authorized>
        <div class="card p-0">
            <div class="card-header bg-dark text-white">
                تغيير كلمة المرور
            </div>
            <div class="card-body">
                <EditForm Context="eContext" Model="@changePasswordDTO" OnValidSubmit="@change">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <input type="password" class="form-control" id="CurrentPassword" @bind-value="changePasswordDTO.CurrentPassword" placeholder="كلمة المرور" />
                    </div>

                    <div class="mb-3">
                        <input type="password" class="form-control" id="NewPassword" @bind-value="changePasswordDTO.NewPassword" placeholder="كلمة المرور الجديدة" />
                    </div>

                    <div class="mb-3">
                        <input type="password" class="form-control" id="ConfirmNewPassword" @bind-value="changePasswordDTO.ConfirmNewPassword" placeholder="تأكيد كلمة المرور الجديدة" />
                    </div>
                    @if (!changing)
                    {
                        <button class="btn mx-2 btn-success" type="submit">حفظ</button>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </div>



    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { set; get; }
    AuthenticationState user;
    private bool changing;
    public ChangePasswordDTO changePasswordDTO { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await authenticationState;
        if (user != null && user.User.Identity.IsAuthenticated)
        {
            changePasswordDTO.Email = user.User.Identity.Name;
        }
    }
    async void change()
    {
        changing = true;
        var result = await Http.ChangePassword(changePasswordDTO);
        if (result)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "فشلت العملية");
        }
        changing = false;
        StateHasChanged();
    }
}