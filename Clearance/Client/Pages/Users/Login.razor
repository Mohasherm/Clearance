@page "/login"
@using Clearance.Client.Validation;
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js
<PageTitle>تسجيل الدخول</PageTitle>
<div class="card p-0 mt-5">
    <div class="card-header bg-dark text-white">
        تسجيل الدخول
    </div>
    <div class="card-body">
        <EditForm Model="@userLoginDTO" OnValidSubmit="@HandleValidSubmit">
            <CustomValidation @ref="customValidation" />
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputText class="form-control" id="Email" @bind-Value="userLoginDTO.Email" placeholder="الإيميل" />
            </div>

            <div class="mb-3">
                <input type="password" class="form-control" id="Password" @bind-value="userLoginDTO.Password" placeholder="كلمة المرور" />
            </div>

            @if (!loggingIn)
            {
                <button class="btn mx-2 btn-submit" type="submit">تسجيل الدخول</button>
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
        </EditForm>
    </div>
</div>



@code {
    private UserLoginDTO userLoginDTO = new();
    private CustomValidation? customValidation;
    private bool loggingIn;

    private async Task HandleValidSubmit()
    {
        loggingIn = true;

        var result = await Http.LoginUser(userLoginDTO);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            customValidation?.ClearErrors();
            var errors = new Dictionary<string, List<string>>();
            errors.Add("", new List<string> { result.Message });
            customValidation?.DisplayErrors(errors);
            await js.InvokeVoidAsync("alert", result.Message);
        }

        loggingIn = false;
    }
}